byte leftPaddle0[8]
  {
      B00001,
      B00001,
      B00001,
      B00001,
      B00000,
      B00000,
      B00000,
      B00000,
  };

  byte leftPaddle1[8]
  {
      B00000,
      B00000,
      B00000,
      B00000,
      B00001,
      B00001,
      B00001,
      B00001,
  };

  byte rightPaddle0[8]
  {
      B10000,
      B10000,
      B10000,
      B10000,
      B00000,
      B00000,
      B00000,
      B00000,
  };
  
  byte rightPaddle1[8]
  {
      B00000,
      B00000,
      B00000,
      B00000,
      B10000,
      B10000,
      B10000,
      B10000,
  };
  


  byte p00[8]
  {
      B10000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
  };
  
  byte p01[8]
  {
      B01000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
  };
  byte p02[8]
  {
      B00100,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
  };
  byte p03[8]
  {
      B00010,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
  };
  byte p04[8]
  {
      B00001,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
  };
  byte p10[8]
  {
      B00000,
      B10000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
  };
  byte p11[8]
  {
      B00000,
      B01000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
  };
  byte p12[8]
  {
      B00000,
      B00100,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
  };
  byte p13[8]
  {
      B00000,
      B00010,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
  };
  byte p14[8]
  {
      B00000,
      B00001,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
  };
  byte p20[8]
  {
      B00000,
      B00000,
      B10000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
  };
  byte p21[8]
  {
      B00000,
      B00000,
      B01000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
  };
  byte p22[8]
  {
      B00000,
      B00000,
      B00100,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
  };
  byte p23[8]
  {
      B00000,
      B00000,
      B00010,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
  };
  byte p24[8]
  {
      B00000,
      B00000,
      B00001,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
  };
  byte p30[8]
  {
      B00000,
      B00000,
      B00000,
      B10000,
      B00000,
      B00000,
      B00000,
      B00000,
  };
  byte p31[8]
  {
      B00000,
      B00000,
      B00000,
      B01000,
      B00000,
      B00000,
      B00000,
      B00000,
  };
  byte p32[8]
  {
      B00000,
      B00000,
      B00000,
      B00100,
      B00000,
      B00000,
      B00000,
      B00000,
  };
  byte p33[8]
  {
      B00000,
      B00000,
      B00000,
      B00010,
      B00000,
      B00000,
      B00000,
      B00000,
  };
  byte p34[8]
  {
      B00000,
      B00000,
      B00000,
      B00001,
      B00000,
      B00000,
      B00000,
      B00000,
  };
  byte p40[8]
  {
      B00000,
      B00000,
      B00000,
      B00000,
      B10000,
      B00000,
      B00000,
      B00000,
  };
  byte p41[8]
  {
      B00000,
      B00000,
      B00000,
      B00000,
      B01000,
      B00000,
      B00000,
      B00000,
  };
  byte p42[8]
  {
      B00000,
      B00000,
      B00000,
      B00000,
      B00100,
      B00000,
      B00000,
      B00000,
  };
  byte p43[8]
  {
      B00000,
      B00000,
      B00000,
      B00000,
      B00010,
      B00000,
      B00000,
      B00000,
  };
  byte p44[8]
  {
      B00000,
      B00000,
      B00000,
      B00000,
      B00001,
      B00000,
      B00000,
      B00000,
  };
  byte p50[8]
  {
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B10000,
      B00000,
      B00000,
  };
  byte p51[8]
  {
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B01000,
      B00000,
      B00000,
  };
  byte p52[8]
  {
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00100,
      B00000,
      B00000,
  };
  byte p53[8]
  {
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00010,
      B00000,
      B00000,
  };
  byte p54[8]
  {
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00001,
      B00000,
      B00000,
  };
  byte p60[8]
  {
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B10000,
      B00000,
  };
  byte p61[8]
  {
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B01000,
      B00000,
  };
  byte p62[8]
  {
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00100,
      B00000,
  };
  byte p63[8]
  {
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00010,
      B00000,
  };
  byte p64[8]
  {
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00001,
      B00000,
  };
  byte p70[8]
  {
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B10000,
  };
  byte p71[8]
  {
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B01000,
  };
  byte p72[8]
  {
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00100,
  };
  byte p73[8]
  {
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00010,
  };
  byte p74[8]
  {
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00000,
      B00001,
  };
  
 byte *array[8][5] = {{p00,p01,p02,p03,p04},{p10,p11,p12,p13,p14},{p20,p21,p22,p23,p24},{p30,p31,p32,p33,p34},{p40,p41,p42,p43,p44},{p50,p51,p52,p53,p54},{p60,p61,p62,p63,p64},{p70,p71,p72,p73,p74}};
#include <LiquidCrystal.h>
#include <avr/interrupt.h>

LiquidCrystal lcd(12, 11, 5, 4, 13, 10);

int scoreRight = 0;
int scoreLeft = 0;
int leftPaddle;
int X_left_paddle;
int X_right_paddle;
int rightPaddle;
void ballTravel();
void ballPosUpdation();
long int X,Y,dx,dy,vert,hori;

  byte *pLeft[2] = {leftPaddle0,leftPaddle1};
  byte *pRight[2] = {rightPaddle0,rightPaddle1};

void setup()
{
  pinMode(6,INPUT);
  pinMode(7,INPUT);
  pinMode(8,INPUT);
  pinMode(9,INPUT);
  
  lcd.begin(16,2);
  Serial.begin(9600);
  lcd.clear();
  
  int i;
  for(i=6;i<=9;i++)
  {  
    digitalWrite(i,HIGH);
  }     
  
  sei(); 
  gameStart();
  
}  

void gameStart()
{
  leftPaddle = 0;
  X_left_paddle =0;
  
  rightPaddle = 1;
  X_right_paddle = 1;
  
  lcd.createChar(2,pLeft[leftPaddle]);
  lcd.setCursor(0,X_left_paddle);
  lcd.write((byte)2);
  
  lcd.createChar(3,pRight[rightPaddle]);
  lcd.setCursor(10,X_right_paddle);
  lcd.write((byte)3);
  
  X = 0;
  Y = 9;
  
  dx = 4;
  dy = 0;
  vert = 1;
  hori = -1;
} 

void loop()
{
  ballTravel();
  delay(6);
  ballPosUpdation();
  
}

void ballPosUpdation()
{
  if(vert == 1 && hori == 1)
  {
     /*Serial.print(Y);
     Serial.print(" ");
     Serial.println(X);*/
     if(dy > 0)
     {
       //Serial.println("1");
       dy = dy-1;
       dx = (dx+1)%5;
       if(dx == 0)
       {
         Y = Y+1;
       }  
     }
     else if(dy == 0 && X == 0)
     {
       //Serial.println("3");
       dx = (dx+1)%5;
       if(dx == 0)
       {
         Y = Y+1;
       }  
       dy = dy+1;
       hori = 1;
       vert = -1;
     }
     else if(dy == 0 && X == 1)
     {
       //Serial.println("2");
       dy = 7;
       dx = (dx+1)%5;
       if(dx == 0)
       {
         Y = Y+1;
       }  
       X = 0;
     }    
  }
  else if(vert == -1 && hori == 1)
  {
     /*Serial.print(Y);
     Serial.print(" ");
     Serial.println(X);*/
     if(dy == 7 && X == 1)//bounce back from bottom
     {
       dx = (dx+1)%5;
       dy = dy-1;
       hori = 1;
       vert = 1;
       if(dx == 0)
       {
         Y = Y+1;
       }  
     }
     else //Normal in-cell
     {
       dy = (dy+1)%8;
       dx = (dx+1)%5;
       if(dx == 0)
       {
         Y = Y+1;
       }
       if(dy == 0)
       {
         X = 1;
       }  
     }
  }
  else if(vert == 1 && hori == -1)
  {
     /*Serial.print(Y);
     Serial.print(" ");
     Serial.println(X);*/
     if(dy == 0 && X == 0)
     {
       dx = dx-1;
       dy = dy+1;
       hori = -1;
       vert = -1;
       if(dx == -1)
       {
         dx = 4;
         Y = Y-1;
       }  
     }
     else//in-cell transition
     {
       dy = dy-1;
       dx = dx-1;
       if(dy == -1)
       {
         dy = 7;
         X = 0;
       }
       if(dx == -1)
       {
         dx = 4;
         Y = Y-1;
       }  
     }
  }
  else if(vert == -1 && hori == -1)
  {
     /*Serial.print(Y);
     Serial.print(" ");
     Serial.println(X);*/
     if(dy == 7 && X == 1)//bounce back from bottom
     {
       Serial.println("HERE");
       Serial.print(dy);
       Serial.print(" ");
       Serial.println(dx);
       dx = dx-1;
       dy = dy-1;
       hori = -1;
       vert = 1;
       if(dx == -1)
       {
         dx = 4;
         Y = Y-1;
       }  
     }
     else //Normal in-cell
     {
       //Serial.println("RUSHIL");
       Serial.print(dy);
       Serial.print(" ");
       Serial.println(dx);
       dy = (dy+1)%8;
       dx = dx-1;
       if(dy == 0)
       {
         X = 1;
       }
       if(dx == -1)
       {
         dx = 4;
         Y = Y - 1;
       }
     } 
  }
}

void rightPaddleCheck()
{
  if(vert == 1 && hori == 1)
  {
     if(rightPaddle == 0 && X == 0 && 0<=dy<=3 && Y == 14 && dx == 4)
     {  
       //Serial.println("1");
       if(dy == 0)
       {
         dy = dy+1;
         vert = -1;
         hori = -1;
       }
       else 
       {
         dy = dy-1;
         vert = 1;
         hori = -1;
       }  
     }
     else if(rightPaddle == 1 && X == 0 && 4<=dy<=7 && Y == 14 && dx == 4)
     {  
        //Serial.println("2");
        dy = dy-1;
        vert = 1;
        hori = -1; 
     }
     else if(rightPaddle == 2 && X == 1 && 0<=dy<=3 && Y == 14 && dx == 4)
     {  
        dy = dy-1;
        vert = 1;
        hori = -1; 
        if(dy == -1)
        {
          dy = 7;
          X = 0;
        }  
     }
     else if(rightPaddle == 3 && X == 1 && 4<=dy<=7 && Y == 14 && dx == 4)
     {  
        dy = dy-1;
        vert = 1;
        hori = -1;   
     }
     else 
     {
       scoreRight = scoreRight + 1;
     }   
  }
  else if(vert == -1 && hori == 1)
  {
    if(rightPaddle == 0 && X ==0 && Y == 14 && 0<=dy<=3)
    {
      dy = dy+1;
      vert = -1;
      hori = -1;
    }  
    else if(rightPaddle == 1 && X ==0 && Y == 14 && 4<=dy<=7)
    {
      dy = (dy+1)%8;
      vert = -1;
      hori = -1;
      X = 1;
    }
    else if(rightPaddle == 0 && X == 1 && Y == 14 && 0<=dy<=3)
    {
      dy = dy+1;
      vert = -1;
      hori = -1;
    }
    else if(rightPaddle == 1 && X ==1 && Y == 14 && 4<=dy<=7)
    {
      dy = dy+1;
      vert = -1;
      hori = -1;
      if(dy == 8)
      {
        dy = dy-1;
        vert = 1;
        hori = -1;
      }
    }
    else
    {
      scoreLeft = scoreLeft + 1;
    }
  }
}  
void leftPaddlecheck()
{  
  if(vert == 1 && hori == -1)
  {
     if(leftPaddle == 0 && X == 0 && Y == 1 && dx == 0 && 0<=dy<=3)
     {
       dy = dy-1;
       vert = -1;
       hori = 1;
       if(dy == -1)
       {
         dy = 1;
         dx = dx+1;
       }  
     }
     else if(leftPaddle == 1 && X == 0 && Y == 1 && dx == 0 && 4<=dy<=7)
     {
       dy = dy-1;
       vert = -1;
       hori = 1;  
     } 
     else if(leftPaddle == 0 && X == 1 && Y == 1 && dx == 0 && 0<=dy<=3)
     {
       dy = dy-1;
       vert = 1;
       hori = 1;
       if(dy == -1)
       {
         dy = 7;
         X = 0;
         vert = 1;
         hori = 1;
       }  
     }
     else if(leftPaddle == 1 && X == 1 && Y == 1 && dx == 0 && 4<=dy<=7)
     {
       dy = dy-1;
       vert = 1;
       hori = 1;  
     }
     else
     {
       scoreRight = scoreRight + 1;
     } 
  }
  else if(vert == -1 && hori == -1)
  {
    if(leftPaddle == 0 && X ==0 && Y == 1 && 0<=dy<=3)
    {
      dy = dy+1;
      vert = -1;
      hori = 1;
    }
    else if(leftPaddle == 1 && X ==0 && Y == 1 && 4<=dy<=7)
    {
      dy = (dy+1)%8;
      vert = -1;
      hori = 1;
      if(dy == 0)
      {
        X = 1;
      }  
    }
    else if(leftPaddle == 0 && X == 1 && Y == 1 && 0<=dy<3)
    {
      dy = (dy+1)%8;
      vert = -1;
      hori = 1;  
    }
    else if(leftPaddle == 1 && X == 1 && Y == 1 && 4<=dy<=7)
    {
      dy = (dy+1)%8;
      vert = -1;
      hori = 1; 
      if(dy == 0)
      {
        dy = 7;
        dx = dx+1;
        vert = 1;
        hori = 1;
      } 
    }
    else
    {
      scoreRight = scoreRight + 1;
    }  
  }   
}  


void ballTravel()
{
  lcd.setCursor(1,0);
  lcd.print("              ");
  lcd.setCursor(1,1);
  lcd.print("              ");
  
  
   lcd.createChar(1,array[dy][dx]);  // Value is a pointer to an array of 8 bytes
   lcd.setCursor(Y,X);
   lcd.write(1);
	
  /* 
  if(dy == 0 && dx == 0)
  {
      lcd.createChar(1,p00);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 0 && dx == 1)
  {
      lcd.createChar(1,p01);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 0 && dx == 2)
  {   
      lcd.createChar(1,p02);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 0 && dx == 3)
  {   
      lcd.createChar(1,p03);
	  lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 0 && dx == 4)
  {   
      lcd.createChar(1,p04);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 1 && dx == 0)
  {   
      lcd.createChar(1,p10);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 1 && dx == 1)
  {   
      lcd.createChar(1,p11);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 1 && dx == 2)
  {   
      lcd.createChar(1,p12);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 1 && dx == 3)
  {   
      lcd.createChar(1,p13);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 1 && dx == 4)
  {   
      lcd.createChar(1,p14);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 2 && dx == 0)
  {
      lcd.createChar(1,p20);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 2 && dx == 1)
  {
      lcd.createChar(1,p21);
      lcd.setCursor(Y,X);   
      lcd.write(1);
  }
  else if(dy == 2 && dx == 2)
  {
      lcd.createChar(1,p22);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 2 && dx == 3)
  {
      lcd.createChar(1,p23);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 2 && dx == 4)
  {
      lcd.createChar(1,p24);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 3 && dx == 0)
  {
      lcd.createChar(1,p30);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 3 && dx == 1)
  {
      lcd.createChar(1,p31);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 3 && dx == 2)
  {
      lcd.createChar(1,p32);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 3 && dx == 3)
  {
      lcd.createChar(1,p33);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 3 && dx == 4)
  {   
      lcd.createChar(1,p34);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 4 && dx == 0)
  {
      lcd.createChar(1,p40);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 4 && dx == 1)
  {
      lcd.createChar(1,p41);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 4 && dx == 2)
  {
      lcd.createChar(1,p42);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 4 && dx == 3)
  {
      lcd.createChar(1,p43);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 4 && dx == 4)
  {
      lcd.createChar(1,p44);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 5 && dx == 0)
  {    
      lcd.createChar(1,p50);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 5 && dx == 1)
  {
      lcd.createChar(1,p51);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 5 && dx == 2)
  {
      lcd.createChar(1,p52);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 5 && dx == 3)
  {
      lcd.createChar(1,p53);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 5 && dx == 4)
  {
      lcd.createChar(1,p54);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 6 && dx == 0)
  {
      lcd.createChar(1,p60);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 6 && dx == 1)
  {
      lcd.createChar(1,p61);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 6 && dx == 2)
  {
      lcd.createChar(1,p62);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 6 && dx == 3)
  {
      lcd.createChar(1,p63);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 6 && dx == 4)
  {   
      lcd.createChar(1,p64);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 7 && dx == 0)
  {
      lcd.createChar(1,p70);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 7 && dx == 1)
  {
      lcd.createChar(1,p71);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 7 && dx == 2)
  {
      lcd.createChar(1,p72);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 7 && dx == 3)
  {
      lcd.createChar(1,p73);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  else if(dy == 7 && dx == 4)
  {
      lcd.createChar(1,p74);
      lcd.setCursor(Y,X);
      lcd.write(1);
  }
  */
}  
